import socket
import threading
import sys

BLACKLISTED_PORTS = {
    # Microsoft RPC/SMB/NetBIOS
    135, 137, 138, 139, 445,

    # LDAP
    389, 636, 3268, 3269,

    # Database services
    1433, 1521, 3306, 5432, 6379, 27017,

    # Remote desktop and terminal services
    3389, 22, 23,

    # Email
    25, 110, 143,

    # Web
    80, 443,
}

# Dictionary: port -> socket
open_connections = {}
lock = threading.Lock()

def scan_port(host, port):
    if port in BLACKLISTED_PORTS:
        return
    try:
        sock = socket.create_connection((host, port), timeout=1)
        sock.settimeout(3)  # Optional timeout for recv
        with lock:
            open_connections[port] = sock
            print(f"[+] Open port: {port}")
    except:
        pass

def scan_all_ports(host):
    threads = []
    print("[*] Scanning ports...")
    for port in range(1, 65536):
        t = threading.Thread(target=scan_port, args=(host, port))
        threads.append(t)
        t.start()
    for t in threads:
        t.join()
    print(f"[+] Scanning completed. Open ports: {list(open_connections.keys())}")

def interact_with_port(port):
    sock = open_connections.get(port)
    if not sock:
        print(f"[-] No socket available for port {port}")
        return

    print(f"[+] Connected to port {port}. Type commands or 'exit'.\n")
    try:
        while True:
            cmd = input(f"Port {port}> ")
            if cmd.lower() in ('exit', 'quit'):
                break
            sock.sendall(cmd.encode() + b'\n')
            try:
                response = sock.recv(4096)
                print(response.decode(errors='ignore'))
            except socket.timeout:
                print("[-] No response.")
    except Exception as e:
        print(f"[-] Error during interaction: {e}")
    finally:
        sock.close()
        del open_connections[port]

def main():
    if len(sys.argv) != 2:
        print(f"Usage: python {sys.argv[0]} <target_host>")
        sys.exit(1)

    target_host = sys.argv[1]
    scan_all_ports(target_host)

    if not open_connections:
        print("[-] No open ports found.")
        return

    while True:
        print("\nSelect a port to interact with (or type 'exit'):")
        for idx, port in enumerate(open_connections):
            print(f"{idx}: Port {port}")
        choice = input("> ")
        if choice.lower() in ('exit', 'quit'):
            break
        try:
            idx = int(choice)
            ports = list(open_connections.keys())
            if 0 <= idx < len(ports):
                interact_with_port(ports[idx])
            else:
                print("[-] Invalid index.")
        except ValueError:
            print("[-] Please enter a valid number.")

if __name__ == "__main__":
    main()
